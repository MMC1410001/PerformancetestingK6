Summary :
Purpose	Explanation :
Test Type -> Streaming Chatbot Performance, website user load, volume testing
Target Metric -> Time to First Byte (TTFB) , vitual users, duration 
Custom Metrics-> first_byte_time, total_requests
Validation -> Status, content presence, streaming start
Streaming Support -> Accept: text/event-stream, raw text parsing
Load Pattern ->	1 → 2 → 0 users in ~25s total
Threshold Goals	-> 95% TTFB < 3s, <1% failures

-- Types of performance testing:

| Type           | Focus                     | Key Goal                                 |
| -------------- | ------------------------- | ---------------------------------------- |
| Load Testing   | Normal usage load         | Validate performance under expected use  |
| Stress Testing | Above normal load         | Find failure point                       |
| Spike Testing  | Sudden burst of users     | Test reaction to abrupt traffic spike    |
| Soak Testing   | Long-duration normal load | Detect long-term issues                  |
| Scalability    | Increased load + infra    | See how system scales                    |
| Capacity       | Max sustainable user load | Define limits for acceptable performance |


// I have created custom charts and running locally . But there are 3 ways to do performance testing with k6 grafana. 
1) a) Running whole code locally from command prompt of node only including generation of charts --> Fully customizable , free
   b) Creating a recording , then generating the script, then vaidating and running the script from k6.exe application on local or cloud -> Local is free, UI is easy to use, cloud is paid -> But results and multiple scripts execution and all integration is quite cumbersome
   c) Running code locally but showing results on cloud --> Doesn't make sense if we are running locally to go and use grafana cloud for checking charts , results on cloud
   d) Running code locally by creation of influx database hosted locally with grafana hosted in browser with charts created by default grafana,deployed on a docker env using .yaml file with help of github actions or jenkins integration
2) Running codes from grafana k6 cloud -> Not preferred -> As Its Paid